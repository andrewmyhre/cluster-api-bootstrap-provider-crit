// +build !ignore_autogenerated

/*
Copyright 2020 Critical Stack, LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	v1alpha2 "github.com/criticalstack/cluster-api-bootstrap-provider-crit/apis/controlplane/v1alpha2"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*CritControlPlane)(nil), (*v1alpha2.CritControlPlane)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_CritControlPlane_To_v1alpha2_CritControlPlane(a.(*CritControlPlane), b.(*v1alpha2.CritControlPlane), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.CritControlPlane)(nil), (*CritControlPlane)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_CritControlPlane_To_v1alpha1_CritControlPlane(a.(*v1alpha2.CritControlPlane), b.(*CritControlPlane), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*CritControlPlaneList)(nil), (*v1alpha2.CritControlPlaneList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_CritControlPlaneList_To_v1alpha2_CritControlPlaneList(a.(*CritControlPlaneList), b.(*v1alpha2.CritControlPlaneList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.CritControlPlaneList)(nil), (*CritControlPlaneList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_CritControlPlaneList_To_v1alpha1_CritControlPlaneList(a.(*v1alpha2.CritControlPlaneList), b.(*CritControlPlaneList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*CritControlPlaneStatus)(nil), (*v1alpha2.CritControlPlaneStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_CritControlPlaneStatus_To_v1alpha2_CritControlPlaneStatus(a.(*CritControlPlaneStatus), b.(*v1alpha2.CritControlPlaneStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.CritControlPlaneStatus)(nil), (*CritControlPlaneStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_CritControlPlaneStatus_To_v1alpha1_CritControlPlaneStatus(a.(*v1alpha2.CritControlPlaneStatus), b.(*CritControlPlaneStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*CritControlPlaneSpec)(nil), (*v1alpha2.CritControlPlaneSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_CritControlPlaneSpec_To_v1alpha2_CritControlPlaneSpec(a.(*CritControlPlaneSpec), b.(*v1alpha2.CritControlPlaneSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.CritControlPlaneSpec)(nil), (*CritControlPlaneSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_CritControlPlaneSpec_To_v1alpha1_CritControlPlaneSpec(a.(*v1alpha2.CritControlPlaneSpec), b.(*CritControlPlaneSpec), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_CritControlPlane_To_v1alpha2_CritControlPlane(in *CritControlPlane, out *v1alpha2.CritControlPlane, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_CritControlPlaneSpec_To_v1alpha2_CritControlPlaneSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_CritControlPlaneStatus_To_v1alpha2_CritControlPlaneStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_CritControlPlane_To_v1alpha2_CritControlPlane is an autogenerated conversion function.
func Convert_v1alpha1_CritControlPlane_To_v1alpha2_CritControlPlane(in *CritControlPlane, out *v1alpha2.CritControlPlane, s conversion.Scope) error {
	return autoConvert_v1alpha1_CritControlPlane_To_v1alpha2_CritControlPlane(in, out, s)
}

func autoConvert_v1alpha2_CritControlPlane_To_v1alpha1_CritControlPlane(in *v1alpha2.CritControlPlane, out *CritControlPlane, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha2_CritControlPlaneSpec_To_v1alpha1_CritControlPlaneSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_CritControlPlaneStatus_To_v1alpha1_CritControlPlaneStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha2_CritControlPlane_To_v1alpha1_CritControlPlane is an autogenerated conversion function.
func Convert_v1alpha2_CritControlPlane_To_v1alpha1_CritControlPlane(in *v1alpha2.CritControlPlane, out *CritControlPlane, s conversion.Scope) error {
	return autoConvert_v1alpha2_CritControlPlane_To_v1alpha1_CritControlPlane(in, out, s)
}

func autoConvert_v1alpha1_CritControlPlaneList_To_v1alpha2_CritControlPlaneList(in *CritControlPlaneList, out *v1alpha2.CritControlPlaneList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1alpha2.CritControlPlane, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_CritControlPlane_To_v1alpha2_CritControlPlane(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha1_CritControlPlaneList_To_v1alpha2_CritControlPlaneList is an autogenerated conversion function.
func Convert_v1alpha1_CritControlPlaneList_To_v1alpha2_CritControlPlaneList(in *CritControlPlaneList, out *v1alpha2.CritControlPlaneList, s conversion.Scope) error {
	return autoConvert_v1alpha1_CritControlPlaneList_To_v1alpha2_CritControlPlaneList(in, out, s)
}

func autoConvert_v1alpha2_CritControlPlaneList_To_v1alpha1_CritControlPlaneList(in *v1alpha2.CritControlPlaneList, out *CritControlPlaneList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CritControlPlane, len(*in))
		for i := range *in {
			if err := Convert_v1alpha2_CritControlPlane_To_v1alpha1_CritControlPlane(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

// Convert_v1alpha2_CritControlPlaneList_To_v1alpha1_CritControlPlaneList is an autogenerated conversion function.
func Convert_v1alpha2_CritControlPlaneList_To_v1alpha1_CritControlPlaneList(in *v1alpha2.CritControlPlaneList, out *CritControlPlaneList, s conversion.Scope) error {
	return autoConvert_v1alpha2_CritControlPlaneList_To_v1alpha1_CritControlPlaneList(in, out, s)
}

func autoConvert_v1alpha1_CritControlPlaneSpec_To_v1alpha2_CritControlPlaneSpec(in *CritControlPlaneSpec, out *v1alpha2.CritControlPlaneSpec, s conversion.Scope) error {
	out.Replicas = in.Replicas
	out.Version = in.Version
	out.InfrastructureTemplate = in.InfrastructureTemplate
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.CritConfigSpec, &out.CritConfigSpec, 0); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha2_CritControlPlaneSpec_To_v1alpha1_CritControlPlaneSpec(in *v1alpha2.CritControlPlaneSpec, out *CritControlPlaneSpec, s conversion.Scope) error {
	out.Replicas = in.Replicas
	out.Version = in.Version
	out.InfrastructureTemplate = in.InfrastructureTemplate
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.CritConfigSpec, &out.CritConfigSpec, 0); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_CritControlPlaneStatus_To_v1alpha2_CritControlPlaneStatus(in *CritControlPlaneStatus, out *v1alpha2.CritControlPlaneStatus, s conversion.Scope) error {
	out.Selector = in.Selector
	out.Replicas = in.Replicas
	out.UpdatedReplicas = in.UpdatedReplicas
	out.ReadyReplicas = in.ReadyReplicas
	out.UnavailableReplicas = in.UnavailableReplicas
	out.Initialized = in.Initialized
	out.Ready = in.Ready
	out.FailureReason = in.FailureReason
	out.FailureMessage = (*string)(unsafe.Pointer(in.FailureMessage))
	return nil
}

// Convert_v1alpha1_CritControlPlaneStatus_To_v1alpha2_CritControlPlaneStatus is an autogenerated conversion function.
func Convert_v1alpha1_CritControlPlaneStatus_To_v1alpha2_CritControlPlaneStatus(in *CritControlPlaneStatus, out *v1alpha2.CritControlPlaneStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_CritControlPlaneStatus_To_v1alpha2_CritControlPlaneStatus(in, out, s)
}

func autoConvert_v1alpha2_CritControlPlaneStatus_To_v1alpha1_CritControlPlaneStatus(in *v1alpha2.CritControlPlaneStatus, out *CritControlPlaneStatus, s conversion.Scope) error {
	out.Selector = in.Selector
	out.Replicas = in.Replicas
	out.UpdatedReplicas = in.UpdatedReplicas
	out.ReadyReplicas = in.ReadyReplicas
	out.UnavailableReplicas = in.UnavailableReplicas
	out.Initialized = in.Initialized
	out.Ready = in.Ready
	out.FailureReason = in.FailureReason
	out.FailureMessage = (*string)(unsafe.Pointer(in.FailureMessage))
	return nil
}

// Convert_v1alpha2_CritControlPlaneStatus_To_v1alpha1_CritControlPlaneStatus is an autogenerated conversion function.
func Convert_v1alpha2_CritControlPlaneStatus_To_v1alpha1_CritControlPlaneStatus(in *v1alpha2.CritControlPlaneStatus, out *CritControlPlaneStatus, s conversion.Scope) error {
	return autoConvert_v1alpha2_CritControlPlaneStatus_To_v1alpha1_CritControlPlaneStatus(in, out, s)
}
